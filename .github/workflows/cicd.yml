name: CI/CD Node JS - Calcul

on:
  push:
      branches:
        - main
      # tags:
      #   - "v*.*.*"

# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false


# env:
#   MY_VARIABLE: 'This is a variable'

jobs:

  build-and-test:
      runs-on: ubuntu-latest
      # runs-on: self-hosted
      defaults:
        run:
          working-directory: ./src

      strategy:
          matrix:
              node-version: [22.x]
      
      steps:

    
    ################################
    # Build #
    ################################
      - name: Checkout - Récuparation du projet
        uses: actions/checkout@v4
      - name: Liste des fichiers et répertoires du dossier courant
        run: ls

      - name: Installation des dépendances
        run: npm install
      - name: Liste des dépendances installées
        run: npm list

    
    ################################
    # Test Linter  #
    ################################
      # - name: Lint Code Base
      #   uses: github/super-linter@v4
      #   env:
      #     VALIDATE_ALL_CODEBASE: false
      #     DEFAULT_BRANCH: main
      #     GITHUB_TOKEN: ${{ secrets.TEST_TOKEN }}


    ###################################
    # Test Jest et couverture du code #
    ###################################
      - name: Test avec Jest
        run: npm test
      - name: Couverture de code avec Coveralls
        uses: coverallsapp/github-action@v2
        with:
          token: ${{ secrets.COVERALLS_TOKEN }}

      
  deploy:

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './public'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
    
  registry:

    runs-on: ubuntu-latest
    # runs-on: self-hosted
    needs: [deploy]
    steps:

      - name: Checkout - Récuparation du projet
        uses: actions/checkout@v4

      - name: Connexion au Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Extraction des metadata (tags, labels) pour Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: zock/calculs
          tags: ${{github.run_number}}


      - name: Construire et pousser l'image Docker dans Dockerhub
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      